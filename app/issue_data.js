'use strict';

define(
  function() {
    return [
      {
        "updated_at": "2013-02-01T19:30:20Z",
        "assignee": null,
        "url": "https://api.github.com/repos/emberjs/data/issues/684",
        "comments": 0,
        "comments_url": "https://api.github.com/repos/emberjs/data/issues/684/comments",
        "user": {
          "type": "User",
          "received_events_url": "https://api.github.com/users/jergason/received_events",
          "url": "https://api.github.com/users/jergason",
          "organizations_url": "https://api.github.com/users/jergason/orgs",
          "gists_url": "https://api.github.com/users/jergason/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/jergason/starred{/owner}{/repo}",
          "gravatar_id": "6b3da28d67c0c30048665399688f0fdc",
          "repos_url": "https://api.github.com/users/jergason/repos",
          "followers_url": "https://api.github.com/users/jergason/followers",
          "subscriptions_url": "https://api.github.com/users/jergason/subscriptions",
          "following_url": "https://api.github.com/users/jergason/following",
          "events_url": "https://api.github.com/users/jergason/events{/privacy}",
          "avatar_url": "https://secure.gravatar.com/avatar/6b3da28d67c0c30048665399688f0fdc?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
          "id": 72027,
          "login": "jergason"
        },
        "created_at": "2013-02-01T19:30:20Z",
        "labels_url": "https://api.github.com/repos/emberjs/data/issues/684/labels{/name}",
        "body": "Steps to reproduce:\r\n\r\n1. Create a store using the FixtureAdapter\r\n1. Create a hasMany relationship between the two models\r\n1. Obtain one of the members of the hasMany relationships\r\n1. Call `removeObject` on the model that has the hasMany relationship\r\n1. Notice that all members of the hasMany relationship are gone from the UI.\r\n\r\nSee the [JSFiddle](http://jsfiddle.net/F2u7X/6/) for a demo. Click the \"Delete From Tab Items\" button and notice all the items disappear.",
        "pull_request": {
          "diff_url": null,
          "patch_url": null,
          "html_url": null
        },
        "milestone": null,
        "closed_at": null,
        "state": "open",
        "labels": [

        ],
        "title": "Using the FixtureAdapter, removing an object from a hasMany relationship removes all objects",
        "number": 684,
        "id": 10555782,
        "events_url": "https://api.github.com/repos/emberjs/data/issues/684/events",
        "html_url": "https://github.com/emberjs/data/issues/684"
      },
      {
        "updated_at": "2013-02-01T19:01:01Z",
        "assignee": null,
        "url": "https://api.github.com/repos/emberjs/data/issues/683",
        "comments": 5,
        "comments_url": "https://api.github.com/repos/emberjs/data/issues/683/comments",
        "user": {
          "type": "User",
          "received_events_url": "https://api.github.com/users/jergason/received_events",
          "url": "https://api.github.com/users/jergason",
          "organizations_url": "https://api.github.com/users/jergason/orgs",
          "gists_url": "https://api.github.com/users/jergason/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/jergason/starred{/owner}{/repo}",
          "gravatar_id": "6b3da28d67c0c30048665399688f0fdc",
          "repos_url": "https://api.github.com/users/jergason/repos",
          "followers_url": "https://api.github.com/users/jergason/followers",
          "subscriptions_url": "https://api.github.com/users/jergason/subscriptions",
          "following_url": "https://api.github.com/users/jergason/following",
          "events_url": "https://api.github.com/users/jergason/events{/privacy}",
          "avatar_url": "https://secure.gravatar.com/avatar/6b3da28d67c0c30048665399688f0fdc?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
          "id": 72027,
          "login": "jergason"
        },
        "created_at": "2013-02-01T18:22:58Z",
        "labels_url": "https://api.github.com/repos/emberjs/data/issues/683/labels{/name}",
        "body": "Apologies if this is me doing something wrong or an Ember issue not a Data one, but here is what I am seeing:\r\n\r\nSteps to reproduce:\r\n1. Create a store using the FixtureAdapter\r\n1. Create a model with a hasMany relationship to another model\r\n1. Create fixture data for both these models\r\n1. Call `deleteRecord()` and then `store.commit()` on one of the members of the hasMany relationship\r\n1. Notice how the parent model's hasMany relationship doesn't update, which makes the UI not update.\r\n\r\nI expect that deleting the member of the hasMany relationship would make the parent update it's hasMany array, which would update the template and remove the deleted child item from the DOM.\r\n\r\nSee [JSFiddle](http://jsfiddle.net/F2u7X/6/) for this issue. Clicking the Delete Record button calls `deleteRecord` the first time, but doesn't actually update the view.",
        "pull_request": {
          "diff_url": null,
          "patch_url": null,
          "html_url": null
        },
        "milestone": null,
        "closed_at": null,
        "state": "open",
        "labels": [

        ],
        "title": "Calling deleteRecord on a model that is a member of a hasMany relationship on another model doesn't remove the relationship using FixtureAdapter",
        "number": 683,
        "id": 10552088,
        "events_url": "https://api.github.com/repos/emberjs/data/issues/683/events",
        "html_url": "https://github.com/emberjs/data/issues/683"
      },
      {
        "updated_at": "2013-02-01T18:18:59Z",
        "assignee": null,
        "url": "https://api.github.com/repos/emberjs/data/issues/682",
        "comments": 0,
        "comments_url": "https://api.github.com/repos/emberjs/data/issues/682/comments",
        "user": {
          "type": "User",
          "received_events_url": "https://api.github.com/users/bobbus/received_events",
          "url": "https://api.github.com/users/bobbus",
          "organizations_url": "https://api.github.com/users/bobbus/orgs",
          "gists_url": "https://api.github.com/users/bobbus/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/bobbus/starred{/owner}{/repo}",
          "gravatar_id": "f6d8a11c19ff958e9b22d02cd6f11a85",
          "repos_url": "https://api.github.com/users/bobbus/repos",
          "followers_url": "https://api.github.com/users/bobbus/followers",
          "subscriptions_url": "https://api.github.com/users/bobbus/subscriptions",
          "following_url": "https://api.github.com/users/bobbus/following",
          "events_url": "https://api.github.com/users/bobbus/events{/privacy}",
          "avatar_url": "https://secure.gravatar.com/avatar/f6d8a11c19ff958e9b22d02cd6f11a85?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
          "id": 319570,
          "login": "bobbus"
        },
        "created_at": "2013-02-01T17:31:53Z",
        "labels_url": "https://api.github.com/repos/emberjs/data/issues/682/labels{/name}",
        "body": "This is a first try to handle errors with embedded records. When talking about embedded records here, I will assume it's an `embedded: always` association.\r\n\r\nAs of now, when an *Error 422* is returned from a commit, the record commited become *invalid*. We expect that the 422 returns a json object with an `errors` key, and from the doc :\r\n\r\n>    The errors object must have keys that correspond to the\r\n>    attribute names. Once each of the specified attributes have\r\n>    changed, the record will automatically move out of the\r\n>    invalid state and be ready to commit again.\r\n\r\nThis is great but it's not working for embedded records : they are not flagged as *invalid*, they stay *inFlight* and never get out of this state. It avoid us to commit the record again.\r\n\r\nWhat I did is ensure that all embedded records will go to the *invalid* state and will become *uncommitted* when needed (see below).\r\n\r\nIn case of embedded record modification, the JSON errors object returned is ignored and it will become *uncommited* for any modification, the parent will be send to the *uncommitted* state as well as all of his embedded records.\r\n\r\nThis could definitely be improved but it requires some works to manage the serialization of errors for embedded object. For now at least, this PR make it possible to use the 422 behavior of the `RESTAdapter` with embedded object.\r\n\r\nIf this one get a chance of merge, I will be happy to improve the code / architecture in any way and of course will write the needed tests.",
        "pull_request": {
          "diff_url": "https://github.com/emberjs/data/pull/682.diff",
          "patch_url": "https://github.com/emberjs/data/pull/682.patch",
          "html_url": "https://github.com/emberjs/data/pull/682"
        },
        "milestone": null,
        "closed_at": null,
        "state": "open",
        "labels": [

        ],
        "title": "Improve errors handling for embedded records",
        "number": 682,
        "id": 10548419,
        "events_url": "https://api.github.com/repos/emberjs/data/issues/682/events",
        "html_url": "https://github.com/emberjs/data/issues/682"
      },
      {
        "updated_at": "2013-02-01T16:06:22Z",
        "assignee": null,
        "url": "https://api.github.com/repos/emberjs/data/issues/681",
        "comments": 0,
        "comments_url": "https://api.github.com/repos/emberjs/data/issues/681/comments",
        "user": {
          "type": "User",
          "received_events_url": "https://api.github.com/users/opichals/received_events",
          "url": "https://api.github.com/users/opichals",
          "organizations_url": "https://api.github.com/users/opichals/orgs",
          "gists_url": "https://api.github.com/users/opichals/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/opichals/starred{/owner}{/repo}",
          "gravatar_id": "27bca5b54872824921bcf573d4638bc4",
          "repos_url": "https://api.github.com/users/opichals/repos",
          "followers_url": "https://api.github.com/users/opichals/followers",
          "subscriptions_url": "https://api.github.com/users/opichals/subscriptions",
          "following_url": "https://api.github.com/users/opichals/following",
          "events_url": "https://api.github.com/users/opichals/events{/privacy}",
          "avatar_url": "https://secure.gravatar.com/avatar/27bca5b54872824921bcf573d4638bc4?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
          "id": 140211,
          "login": "opichals"
        },
        "created_at": "2013-02-01T16:06:22Z",
        "labels_url": "https://api.github.com/repos/emberjs/data/issues/681/labels{/name}",
        "body": "This makes the ember-data usable in node.js again.",
        "pull_request": {
          "diff_url": "https://github.com/emberjs/data/pull/681.diff",
          "patch_url": "https://github.com/emberjs/data/pull/681.patch",
          "html_url": "https://github.com/emberjs/data/pull/681"
        },
        "milestone": null,
        "closed_at": null,
        "state": "open",
        "labels": [

        ],
        "title": "Avoid touching the `window` object in case it is not defined.",
        "number": 681,
        "id": 10545052,
        "events_url": "https://api.github.com/repos/emberjs/data/issues/681/events",
        "html_url": "https://github.com/emberjs/data/issues/681"
      },
      {
        "updated_at": "2013-02-01T12:35:11Z",
        "assignee": null,
        "url": "https://api.github.com/repos/emberjs/data/issues/680",
        "comments": 1,
        "comments_url": "https://api.github.com/repos/emberjs/data/issues/680/comments",
        "user": {
          "type": "User",
          "received_events_url": "https://api.github.com/users/andrewfan/received_events",
          "url": "https://api.github.com/users/andrewfan",
          "organizations_url": "https://api.github.com/users/andrewfan/orgs",
          "gists_url": "https://api.github.com/users/andrewfan/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/andrewfan/starred{/owner}{/repo}",
          "gravatar_id": "b1016196c7a0f8ae0eb468826ab27f19",
          "repos_url": "https://api.github.com/users/andrewfan/repos",
          "followers_url": "https://api.github.com/users/andrewfan/followers",
          "subscriptions_url": "https://api.github.com/users/andrewfan/subscriptions",
          "following_url": "https://api.github.com/users/andrewfan/following",
          "events_url": "https://api.github.com/users/andrewfan/events{/privacy}",
          "avatar_url": "https://secure.gravatar.com/avatar/b1016196c7a0f8ae0eb468826ab27f19?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
          "id": 1834162,
          "login": "andrewfan"
        },
        "created_at": "2013-02-01T12:08:32Z",
        "labels_url": "https://api.github.com/repos/emberjs/data/issues/680/labels{/name}",
        "body": "In store.findMany method we check what references do we need to pull from server side:\r\n     \r\n    var references = map(ids, function(reference) {\r\n      if (typeof reference !== 'object' && reference !== null) {\r\n        return this.referenceForId(type, reference);\r\n      }\r\n\r\n      return reference;\r\n    }, this);\r\n\r\n    var neededReferences = this.neededReferences(type, references),\r\n        manyArray = this.createManyArray(type, Ember.A(references)),\r\n\r\nreferences variable is an array of objects, but store.createManyArray method wants to receive array of numbers\r\n\r\ninside store.createManyArray for each clientID we call store.recordArraysForClientId method that populates store's recordArrays. So we getting:\r\n\r\n    [object Object]: Ember.OrderedSet\r\n\r\ninstead of \r\n    \r\n    cliendId: Ember.OrderedSet\r\n\r\nIt does not produce an error because we dont have any validation on clientId type, but in future when i want to update model from that ManyArray i dont have any correct events fired",
        "pull_request": {
          "diff_url": null,
          "patch_url": null,
          "html_url": null
        },
        "milestone": null,
        "closed_at": null,
        "state": "open",
        "labels": [

        ],
        "title": "store.findMany works incorrect with creating new manyArrays",
        "number": 680,
        "id": 10537776,
        "events_url": "https://api.github.com/repos/emberjs/data/issues/680/events",
        "html_url": "https://github.com/emberjs/data/issues/680"
      },
      {
        "updated_at": "2013-02-01T10:09:58Z",
        "assignee": null,
        "url": "https://api.github.com/repos/emberjs/data/issues/679",
        "comments": 2,
        "comments_url": "https://api.github.com/repos/emberjs/data/issues/679/comments",
        "user": {
          "type": "User",
          "received_events_url": "https://api.github.com/users/seanabrahams/received_events",
          "url": "https://api.github.com/users/seanabrahams",
          "organizations_url": "https://api.github.com/users/seanabrahams/orgs",
          "gists_url": "https://api.github.com/users/seanabrahams/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/seanabrahams/starred{/owner}{/repo}",
          "gravatar_id": "1e3d7bc9541b8f277a36c37a447f278e",
          "repos_url": "https://api.github.com/users/seanabrahams/repos",
          "followers_url": "https://api.github.com/users/seanabrahams/followers",
          "subscriptions_url": "https://api.github.com/users/seanabrahams/subscriptions",
          "following_url": "https://api.github.com/users/seanabrahams/following",
          "events_url": "https://api.github.com/users/seanabrahams/events{/privacy}",
          "avatar_url": "https://secure.gravatar.com/avatar/1e3d7bc9541b8f277a36c37a447f278e?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
          "id": 44398,
          "login": "seanabrahams"
        },
        "created_at": "2013-02-01T09:49:51Z",
        "labels_url": "https://api.github.com/repos/emberjs/data/issues/679/labels{/name}",
        "body": "A much more elegant solution is likely to be found but this gets the job done. Test included.",
        "pull_request": {
          "diff_url": "https://github.com/emberjs/data/pull/679.diff",
          "patch_url": "https://github.com/emberjs/data/pull/679.patch",
          "html_url": "https://github.com/emberjs/data/pull/679"
        },
        "milestone": null,
        "closed_at": null,
        "state": "open",
        "labels": [

        ],
        "title": "[Fixes #674] Loading embedded relationship in sideloaded relationship",
        "number": 679,
        "id": 10534160,
        "events_url": "https://api.github.com/repos/emberjs/data/issues/679/events",
        "html_url": "https://github.com/emberjs/data/issues/679"
      },
      {
        "updated_at": "2013-02-01T01:59:43Z",
        "assignee": null,
        "url": "https://api.github.com/repos/emberjs/data/issues/678",
        "comments": 0,
        "comments_url": "https://api.github.com/repos/emberjs/data/issues/678/comments",
        "user": {
          "type": "User",
          "received_events_url": "https://api.github.com/users/viatropos/received_events",
          "url": "https://api.github.com/users/viatropos",
          "organizations_url": "https://api.github.com/users/viatropos/orgs",
          "gists_url": "https://api.github.com/users/viatropos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/viatropos/starred{/owner}{/repo}",
          "gravatar_id": "a2beb162438985ede0a49b240aa17ca1",
          "repos_url": "https://api.github.com/users/viatropos/repos",
          "followers_url": "https://api.github.com/users/viatropos/followers",
          "subscriptions_url": "https://api.github.com/users/viatropos/subscriptions",
          "following_url": "https://api.github.com/users/viatropos/following",
          "events_url": "https://api.github.com/users/viatropos/events{/privacy}",
          "avatar_url": "https://secure.gravatar.com/avatar/a2beb162438985ede0a49b240aa17ca1?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
          "id": 28718,
          "login": "viatropos"
        },
        "created_at": "2013-02-01T01:50:50Z",
        "labels_url": "https://api.github.com/repos/emberjs/data/issues/678/labels{/name}",
        "body": "If you have a model like this:\r\n\r\n``` javascript\r\nApp.Post = DS.Model.extend({\r\n  status: DS.attr('string', {defaultValue: 'draft'})\r\n});\r\n```\r\n\r\nWhen you try to access the `status` property it returns `null`:\r\n\r\n``` javascript\r\nvar post = App.Post.createRecord();\r\nconsole.log(post.get('status')) // null\r\n```\r\n\r\nThe issue is, `DS.attr` only returns the `defaultValue` if the set value is `undefined`, which makes sense (you may want to save an attribute with value `null` to the database, but if it's undefined then you are basically resetting it). But `DS.JSONTransforms.string` is written like this:\r\n\r\n``` javascript\r\nDS.JSONTransforms = {\r\n  string: {\r\n    deserialize: function(serialized) {\r\n      return none(serialized) ? null : String(serialized);\r\n    },\r\n\r\n    serialize: function(deserialized) {\r\n      return none(deserialized) ? null : String(deserialized);\r\n    }\r\n  }\r\n  //...\r\n}\r\n```\r\n\r\nIt should return `undefined` rather than `null`, but maybe there are other potential side effects, thoughts?\r\n\r\nThis is probably also an issue for `number` and other transform types.",
        "pull_request": {
          "diff_url": null,
          "patch_url": null,
          "html_url": null
        },
        "milestone": null,
        "closed_at": null,
        "state": "open",
        "labels": [

        ],
        "title": "DS.attr('string') defaultValue value never gets set b/c DS.JSONTransforms.string returns null",
        "number": 678,
        "id": 10525974,
        "events_url": "https://api.github.com/repos/emberjs/data/issues/678/events",
        "html_url": "https://github.com/emberjs/data/issues/678"
      },
      {
        "updated_at": "2013-01-31T17:42:20Z",
        "assignee": null,
        "url": "https://api.github.com/repos/emberjs/data/issues/677",
        "comments": 0,
        "comments_url": "https://api.github.com/repos/emberjs/data/issues/677/comments",
        "user": {
          "type": "User",
          "received_events_url": "https://api.github.com/users/krainboltgreene/received_events",
          "url": "https://api.github.com/users/krainboltgreene",
          "organizations_url": "https://api.github.com/users/krainboltgreene/orgs",
          "gists_url": "https://api.github.com/users/krainboltgreene/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/krainboltgreene/starred{/owner}{/repo}",
          "gravatar_id": "e1e3a7a63326260b58f82d12f9003e64",
          "repos_url": "https://api.github.com/users/krainboltgreene/repos",
          "followers_url": "https://api.github.com/users/krainboltgreene/followers",
          "subscriptions_url": "https://api.github.com/users/krainboltgreene/subscriptions",
          "following_url": "https://api.github.com/users/krainboltgreene/following",
          "events_url": "https://api.github.com/users/krainboltgreene/events{/privacy}",
          "avatar_url": "https://secure.gravatar.com/avatar/e1e3a7a63326260b58f82d12f9003e64?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
          "id": 334809,
          "login": "krainboltgreene"
        },
        "created_at": "2013-01-31T06:35:19Z",
        "labels_url": "https://api.github.com/repos/emberjs/data/issues/677/labels{/name}",
        "body": "In a controller's `model` attribute `.find()` for a fixture model wont return anything. http://jsfiddle.net/jg2e8/9/\r\n\r\nYou can actually get results if you run it in the console (In the right frame of course).",
        "pull_request": {
          "diff_url": null,
          "patch_url": null,
          "html_url": null
        },
        "milestone": null,
        "closed_at": null,
        "state": "open",
        "labels": [

        ],
        "title": "find() not finding fixtures",
        "number": 677,
        "id": 10489877,
        "events_url": "https://api.github.com/repos/emberjs/data/issues/677/events",
        "html_url": "https://github.com/emberjs/data/issues/677"
      },
      {
        "updated_at": "2013-01-30T22:09:12Z",
        "assignee": null,
        "url": "https://api.github.com/repos/emberjs/data/issues/676",
        "comments": 0,
        "comments_url": "https://api.github.com/repos/emberjs/data/issues/676/comments",
        "user": {
          "type": "User",
          "received_events_url": "https://api.github.com/users/fuag15/received_events",
          "url": "https://api.github.com/users/fuag15",
          "organizations_url": "https://api.github.com/users/fuag15/orgs",
          "gists_url": "https://api.github.com/users/fuag15/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/fuag15/starred{/owner}{/repo}",
          "gravatar_id": "0bb888b1c302e33b0c96172a7f253dca",
          "repos_url": "https://api.github.com/users/fuag15/repos",
          "followers_url": "https://api.github.com/users/fuag15/followers",
          "subscriptions_url": "https://api.github.com/users/fuag15/subscriptions",
          "following_url": "https://api.github.com/users/fuag15/following",
          "events_url": "https://api.github.com/users/fuag15/events{/privacy}",
          "avatar_url": "https://secure.gravatar.com/avatar/0bb888b1c302e33b0c96172a7f253dca?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
          "id": 1067441,
          "login": "fuag15"
        },
        "created_at": "2013-01-30T21:59:55Z",
        "labels_url": "https://api.github.com/repos/emberjs/data/issues/676/labels{/name}",
        "body": "I have a `Post`, the post `hasMany` `Comment` the `Comment` `belongsTo` `Post`. My route is set up such that:\r\n\r\n    @resource 'posts', ->\r\n      @route 'new'\r\n      @resource 'post', path: '/:post_id', ->\r\n        @route 'show'\r\n        @route 'edit'\r\n        @resource 'comments', ->\r\n          @route 'new'\r\n          @resource 'comment', path: '/:comment_id', ->\r\n            @route 'show'\r\n            @route 'edit'\r\n\r\nhere is the related controller:\r\n\r\n    Lifesocket.CommentsNewController = Ember.ObjectController.extend\r\n      create: ->\r\n        post = @get('controllers.post.content')\r\n        post.get('comments').pushObject @content\r\n        # at this point @content.post_id is null still\r\n        @store.commit() # tries to commit with post_id = null and fails because api wont take it\r\n        @content.addObserver 'id', @, 'afterCreate'\r\n\r\n      afterCreate: ->\r\n        @content.removeObserver 'id', @, 'afterCreate'\r\n        @transitionToRoute 'comment.show', @content\r\n\r\n      cancel: ->\r\n        @content.deleteRecord()\r\n        @transitionToRoute 'posts.index'\r\n\r\n      needs: ['post']\r\n\r\nand for completeness here are my model defs:\r\n\r\n    App.Post = DS.Model.extend\r\n      title: DS.attr 'string'\r\n      full: DS.attr 'string'\r\n      comments: DS.hasMany 'App.Comment'\r\n\r\n    App.Comment = DS.Model.extend\r\n      text: DS.attr 'string'\r\n      posts: DS.belongsTo 'App.Post'\r\n\r\nSo right now it is impossible for my app to handle nested relationships, am I doing it wrong? Is this a bug?\r\n\r\nDetails:\r\n* Ember pre4\r\n* Ember-data latest compile\r\n* Handlebars rc2",
        "pull_request": {
          "diff_url": null,
          "patch_url": null,
          "html_url": null
        },
        "milestone": null,
        "closed_at": null,
        "state": "open",
        "labels": [

        ],
        "title": "hasMany / belongsTo is unworkable for creating new child records",
        "number": 676,
        "id": 10478100,
        "events_url": "https://api.github.com/repos/emberjs/data/issues/676/events",
        "html_url": "https://github.com/emberjs/data/issues/676"
      },
      {
        "updated_at": "2013-01-30T21:56:24Z",
        "assignee": null,
        "url": "https://api.github.com/repos/emberjs/data/issues/675",
        "comments": 0,
        "comments_url": "https://api.github.com/repos/emberjs/data/issues/675/comments",
        "user": {
          "type": "User",
          "received_events_url": "https://api.github.com/users/joefiorini/received_events",
          "url": "https://api.github.com/users/joefiorini",
          "organizations_url": "https://api.github.com/users/joefiorini/orgs",
          "gists_url": "https://api.github.com/users/joefiorini/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/joefiorini/starred{/owner}{/repo}",
          "gravatar_id": "9d778043b9c008cf3f5c6bc52e648c53",
          "repos_url": "https://api.github.com/users/joefiorini/repos",
          "followers_url": "https://api.github.com/users/joefiorini/followers",
          "subscriptions_url": "https://api.github.com/users/joefiorini/subscriptions",
          "following_url": "https://api.github.com/users/joefiorini/following",
          "events_url": "https://api.github.com/users/joefiorini/events{/privacy}",
          "avatar_url": "https://secure.gravatar.com/avatar/9d778043b9c008cf3f5c6bc52e648c53?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
          "id": 3648,
          "login": "joefiorini"
        },
        "created_at": "2013-01-30T21:56:24Z",
        "labels_url": "https://api.github.com/repos/emberjs/data/issues/675/labels{/name}",
        "body": "We are trying to generate a JSON structure where the root resource name is different than the URL. For example:\r\n\r\n```javascript\r\nApp.Person = DS.Model.extend({\r\n  name: DS.attr(\"string\"),\r\n  title: DS.attr(\"string\")\r\n});\r\n```\r\n\r\nWe might want this to POST to `/people` but have the JSON:\r\n\r\n```json\r\n{\r\n  \"user\": {\r\n    name: \"example\",\r\n    title: \"example\"\r\n  }\r\n}\r\n```\r\n\r\nWe tried to override `rootForType` on the JSONSerializer like so:\r\n\r\n```javascript\r\n    adapter: DS.RESTAdapter.create({\r\n              url: \"http://example.com\",\r\n              serializer: DS.JSONSerializer.extend({\r\n                rootForType: function(type){\r\n                  if(type.toString().match(/Person/)){\r\n                    return \"user\";\r\n                  } else {\r\n                    return this._super.apply(this, arguments);\r\n                  }\r\n                }\r\n              })\r\n             })\r\n```\r\n\r\nThis generates the wanted JSON (YAY), but then it tries to POST to `/users` (BOO) because `rootForType` tightly coupled to the RESTAdapter. Is there a better way to do what we're trying to do?",
        "pull_request": {
          "diff_url": null,
          "patch_url": null,
          "html_url": null
        },
        "milestone": null,
        "closed_at": null,
        "state": "open",
        "labels": [

        ],
        "title": "Allow overriding JSONSerializer#rootForType without changing the URL",
        "number": 675,
        "id": 10477944,
        "events_url": "https://api.github.com/repos/emberjs/data/issues/675/events",
        "html_url": "https://github.com/emberjs/data/issues/675"
      },
      {
        "updated_at": "2013-01-31T11:20:47Z",
        "assignee": null,
        "url": "https://api.github.com/repos/emberjs/data/issues/674",
        "comments": 2,
        "comments_url": "https://api.github.com/repos/emberjs/data/issues/674/comments",
        "user": {
          "type": "User",
          "received_events_url": "https://api.github.com/users/seanabrahams/received_events",
          "url": "https://api.github.com/users/seanabrahams",
          "organizations_url": "https://api.github.com/users/seanabrahams/orgs",
          "gists_url": "https://api.github.com/users/seanabrahams/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/seanabrahams/starred{/owner}{/repo}",
          "gravatar_id": "1e3d7bc9541b8f277a36c37a447f278e",
          "repos_url": "https://api.github.com/users/seanabrahams/repos",
          "followers_url": "https://api.github.com/users/seanabrahams/followers",
          "subscriptions_url": "https://api.github.com/users/seanabrahams/subscriptions",
          "following_url": "https://api.github.com/users/seanabrahams/following",
          "events_url": "https://api.github.com/users/seanabrahams/events{/privacy}",
          "avatar_url": "https://secure.gravatar.com/avatar/1e3d7bc9541b8f277a36c37a447f278e?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
          "id": 44398,
          "login": "seanabrahams"
        },
        "created_at": "2013-01-30T02:38:53Z",
        "labels_url": "https://api.github.com/repos/emberjs/data/issues/674/labels{/name}",
        "body": "Not having any luck with embedded relationships inside of relationships that are sideloaded.\r\n\r\nEmbedded relationships inside non-sideloaded (main) items work fine using the embedded mapping.\r\n\r\n````\r\nAdapter.map(\"App.Comment\", {\r\n  author: { embedded: \"load\" }\r\n});\r\n````\r\n\r\nExample\r\n````\r\n{\r\n  \"comments\": [\r\n    {\r\n      \"body\": \"Good vibrations\",\r\n      \"id\": 1,\r\n      \"author\": {\r\n        \"id\": 1,\r\n        \"name\": \"Marky Mark\",\r\n      }\r\n    }\r\n  ],\r\n  \"post\": {\r\n    \"id\": 1,\r\n    \"body\": \"Funky Bunch Productions\",\r\n    \"comments\": [1]\r\n  }\r\n}\r\n````\r\n\r\n````\r\npost = App.Post.find(1)\r\n> Class {store: Class, clientId: 171, stateManager: Class, _relationshipChanges: Object, _changesToSync: Object…}\r\npost.get('comments').objectAt(0)\r\n> Class {store: Class, clientId: 173, _relationshipChanges: Object, _changesToSync: Object, id: \"1\"…}\r\npost.get('comments').objectAt(0).get('body')\r\n> \"Good vibrations\"\r\npost.get('comments').objectAt(0).get('author')\r\n> TypeError: Cannot call method '_create' of undefined\r\n````\r\n\r\n````\r\nmaterializeRecord: function(type, clientId, id) {\r\n    var record;\r\n\r\n    // ************************************************\r\n    // type is undefined here causing TypeError\r\n    // ************************************************\r\n    this.recordCache[clientId] = record = type._create({\r\n      store: this,\r\n      clientId: clientId,\r\n    });\r\n\r\n    set(record, 'id', id);\r\n\r\n    get(this, 'defaultTransaction').adoptRecord(record);\r\n\r\n    record.loadingData();\r\n    return record;\r\n  },\r\n````\r\n\r\nWorking on a jsbin of the problem: http://jsbin.com/ogiyud/9/edit",
        "pull_request": {
          "diff_url": null,
          "patch_url": null,
          "html_url": null
        },
        "milestone": null,
        "closed_at": null,
        "state": "open",
        "labels": [

        ],
        "title": "Loading embedded relationship in sideloaded relationship",
        "number": 674,
        "id": 10443883,
        "events_url": "https://api.github.com/repos/emberjs/data/issues/674/events",
        "html_url": "https://github.com/emberjs/data/issues/674"
      },
      {
        "updated_at": "2013-01-28T18:47:18Z",
        "assignee": null,
        "url": "https://api.github.com/repos/emberjs/data/issues/673",
        "comments": 2,
        "comments_url": "https://api.github.com/repos/emberjs/data/issues/673/comments",
        "user": {
          "type": "User",
          "received_events_url": "https://api.github.com/users/davidpett/received_events",
          "url": "https://api.github.com/users/davidpett",
          "organizations_url": "https://api.github.com/users/davidpett/orgs",
          "gists_url": "https://api.github.com/users/davidpett/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/davidpett/starred{/owner}{/repo}",
          "gravatar_id": "36c7915b343a423cf929b0b1cbecd0de",
          "repos_url": "https://api.github.com/users/davidpett/repos",
          "followers_url": "https://api.github.com/users/davidpett/followers",
          "subscriptions_url": "https://api.github.com/users/davidpett/subscriptions",
          "following_url": "https://api.github.com/users/davidpett/following",
          "events_url": "https://api.github.com/users/davidpett/events{/privacy}",
          "avatar_url": "https://secure.gravatar.com/avatar/36c7915b343a423cf929b0b1cbecd0de?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
          "id": 71938,
          "login": "davidpett"
        },
        "created_at": "2013-01-28T18:39:36Z",
        "labels_url": "https://api.github.com/repos/emberjs/data/issues/673/labels{/name}",
        "body": "I noticed this pull request adding the ability to have a custom url: https://github.com/emberjs/data/commit/35f66f12781af18187569ae1f70651754136f8ac to your RESTAdapter. In using this, I noticed that the dataType of json was still being used, but when a custom URL is used, it should be using jsonp for CORS support.\r\n\r\nI added dataType of jsonp when a custom url is used.",
        "pull_request": {
          "diff_url": "https://github.com/emberjs/data/pull/673.diff",
          "patch_url": "https://github.com/emberjs/data/pull/673.patch",
          "html_url": "https://github.com/emberjs/data/pull/673"
        },
        "milestone": null,
        "closed_at": null,
        "state": "open",
        "labels": [

        ],
        "title": "added jsonp for custom url",
        "number": 673,
        "id": 10386736,
        "events_url": "https://api.github.com/repos/emberjs/data/issues/673/events",
        "html_url": "https://github.com/emberjs/data/issues/673"
      },
      {
        "updated_at": "2013-01-29T04:35:04Z",
        "assignee": null,
        "url": "https://api.github.com/repos/emberjs/data/issues/672",
        "comments": 2,
        "comments_url": "https://api.github.com/repos/emberjs/data/issues/672/comments",
        "user": {
          "type": "User",
          "received_events_url": "https://api.github.com/users/mmpestorich/received_events",
          "url": "https://api.github.com/users/mmpestorich",
          "organizations_url": "https://api.github.com/users/mmpestorich/orgs",
          "gists_url": "https://api.github.com/users/mmpestorich/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/mmpestorich/starred{/owner}{/repo}",
          "gravatar_id": "dbc7ce5d92647532b49bbed08a75cfca",
          "repos_url": "https://api.github.com/users/mmpestorich/repos",
          "followers_url": "https://api.github.com/users/mmpestorich/followers",
          "subscriptions_url": "https://api.github.com/users/mmpestorich/subscriptions",
          "following_url": "https://api.github.com/users/mmpestorich/following",
          "events_url": "https://api.github.com/users/mmpestorich/events{/privacy}",
          "avatar_url": "https://secure.gravatar.com/avatar/dbc7ce5d92647532b49bbed08a75cfca?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
          "id": 979523,
          "login": "mmpestorich"
        },
        "created_at": "2013-01-28T18:30:08Z",
        "labels_url": "https://api.github.com/repos/emberjs/data/issues/672/labels{/name}",
        "body": "This allows one to implement a `findHasMany` hook on a custom adapter to resolve hasMany relationships on demand (IOW, not needing a list of related ids upfront). \r\n\r\nCurrently, the expectation is that there is a list of related ids for any unresolved hasMany relationships. Then, when the relationship is needed, that list of ids will be used to resolve the related records by passing them along to the store's `findMany`. The workflow is essentially:\r\n\r\nDS.Model.get('aHasManyRelationship') -> DS.hasMany -> DS.Store.findMany -> DS.Adapter.findMany -> ... request to server ... -> DS.Adapter.didFindMany -> DS.Serializer.extractMany -> DS.Store.loadMany\r\n\r\nThere has been a lot of discussion online about trying to do this without the need to provide any related ids upfront. Given a record and name of a hasMany relationship, one would presume to have everything they would need to resolve that relationship server-side without needing any ids. The DS.Adapter could, for example, introspect the record to obtain its type and id. Then pass a record type, unique id and relationship name to the server. With that information a server could then grab the record for the given type and id and then ask for the realted records using the name of the hasMany relationship.\r\n\r\nI notice in reading through some of ember-data's more recent revisions that the initial plumbing seems to be in place for this. The store implements a `loadHasMany` and contains code in `findMany` to fire off a call to the adapter's `findHasMany` hook if the expected array of related ids is undefined and call `didFindHasMany` in a success callback when the server returns the requested payload. \r\n\r\nSo, I teaked things in a couple places. This pull request assumes that if a hasMany relationship is undefined on an existing record, it should be resolved with a request to the server. The workflow becomes:\r\n\r\nDS.Model.get('aHasManyRelationship') -> DS.hasMany -> DS.Store.findMany -> <b>DS.Adapter.findHasMany</b> -> ... request to server ... -> <b>DS.Adapter.didFindHasMany</b> -> DS.Serializer.extractMany -> <b>DS.Store.loadHasMany</b>\r\n\r\nAll one needs to do is implement a `Adapter.findHasMany(store, record, relationship)` and call `adapter.didFindHasMany(store, type, payload, record, key)` in a success callback.\r\n\r\nI have been using this for that last few days without issue. I also believe that these changes are non-breaking to existing symantics but haven't had the time to extensively test that.",
        "pull_request": {
          "diff_url": "https://github.com/emberjs/data/pull/672.diff",
          "patch_url": "https://github.com/emberjs/data/pull/672.patch",
          "html_url": "https://github.com/emberjs/data/pull/672"
        },
        "milestone": null,
        "closed_at": null,
        "state": "open",
        "labels": [

        ],
        "title": "Resolve hasMany Relationships On-Demand",
        "number": 672,
        "id": 10386386,
        "events_url": "https://api.github.com/repos/emberjs/data/issues/672/events",
        "html_url": "https://github.com/emberjs/data/issues/672"
      },
      {
        "updated_at": "2013-01-28T18:20:43Z",
        "assignee": null,
        "url": "https://api.github.com/repos/emberjs/data/issues/671",
        "comments": 0,
        "comments_url": "https://api.github.com/repos/emberjs/data/issues/671/comments",
        "user": {
          "type": "User",
          "received_events_url": "https://api.github.com/users/hilem/received_events",
          "url": "https://api.github.com/users/hilem",
          "organizations_url": "https://api.github.com/users/hilem/orgs",
          "gists_url": "https://api.github.com/users/hilem/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/hilem/starred{/owner}{/repo}",
          "gravatar_id": "1d0a48aa7e0b665d767be08a8457b053",
          "repos_url": "https://api.github.com/users/hilem/repos",
          "followers_url": "https://api.github.com/users/hilem/followers",
          "subscriptions_url": "https://api.github.com/users/hilem/subscriptions",
          "following_url": "https://api.github.com/users/hilem/following",
          "events_url": "https://api.github.com/users/hilem/events{/privacy}",
          "avatar_url": "https://secure.gravatar.com/avatar/1d0a48aa7e0b665d767be08a8457b053?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
          "id": 215006,
          "login": "hilem"
        },
        "created_at": "2013-01-28T18:15:41Z",
        "labels_url": "https://api.github.com/repos/emberjs/data/issues/671/labels{/name}",
        "body": "Background:\r\nThis was originally working maybe 2 weeks ago.  Unfortunately I hadn't written a test for it at the time so I wasn't alerted which update broke it.  I just noticed it was broke the other day.  When I get more time I'll dig into exactly which commit broke it and update here but I wanted to post this in the interim to make sure its on the radar.\r\n\r\nUsing:\r\nEmber.js:     pre4\r\nEmber-Data: commit 4e17400b92 (current on master as of 1/28/2013 1:18PM EST)\r\n\r\nExample Demo: \r\nhttp://jsfiddle.net/hilem/GMt7H/1/\r\nSteps: \r\n1) Run\r\n2) View console output while you hit remove\r\n\r\nError:\r\nMaximum call stack reached occurs.\r\n\r\nOriginal Question on SO:\r\nhttp://stackoverflow.com/questions/14552589/infinite-loop-in-ember-data-clearrelationships\r\n\r\n",
        "pull_request": {
          "diff_url": null,
          "patch_url": null,
          "html_url": null
        },
        "milestone": null,
        "closed_at": null,
        "state": "open",
        "labels": [

        ],
        "title": "infinite loop within clearRelationships upon attempting to delete",
        "number": 671,
        "id": 10385863,
        "events_url": "https://api.github.com/repos/emberjs/data/issues/671/events",
        "html_url": "https://github.com/emberjs/data/issues/671"
      },
      {
        "updated_at": "2013-01-28T14:00:27Z",
        "assignee": null,
        "url": "https://api.github.com/repos/emberjs/data/issues/670",
        "comments": 0,
        "comments_url": "https://api.github.com/repos/emberjs/data/issues/670/comments",
        "user": {
          "type": "User",
          "received_events_url": "https://api.github.com/users/bobbus/received_events",
          "url": "https://api.github.com/users/bobbus",
          "organizations_url": "https://api.github.com/users/bobbus/orgs",
          "gists_url": "https://api.github.com/users/bobbus/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/bobbus/starred{/owner}{/repo}",
          "gravatar_id": "f6d8a11c19ff958e9b22d02cd6f11a85",
          "repos_url": "https://api.github.com/users/bobbus/repos",
          "followers_url": "https://api.github.com/users/bobbus/followers",
          "subscriptions_url": "https://api.github.com/users/bobbus/subscriptions",
          "following_url": "https://api.github.com/users/bobbus/following",
          "events_url": "https://api.github.com/users/bobbus/events{/privacy}",
          "avatar_url": "https://secure.gravatar.com/avatar/f6d8a11c19ff958e9b22d02cd6f11a85?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
          "id": 319570,
          "login": "bobbus"
        },
        "created_at": "2013-01-28T13:55:22Z",
        "labels_url": "https://api.github.com/repos/emberjs/data/issues/670/labels{/name}",
        "body": "See this jsfiddle : http://jsfiddle.net/adriencoquio/f4swt/\r\n\r\nNotice that if the comments are marked `embedded: 'load'` instead of `embedded: 'always'` only the edited one is marked dirty : [example](http://jsfiddle.net/adriencoquio/rU2rT)\r\n\r\nIt looks like an issue but it could also be the intended behavior, is it the case ?\r\nIf not, I can write a failing test for this.\r\n\r\n\r\n\r\n",
        "pull_request": {
          "diff_url": null,
          "patch_url": null,
          "html_url": null
        },
        "milestone": null,
        "closed_at": null,
        "state": "open",
        "labels": [

        ],
        "title": "Modify one object in an embedded has_many array mark all array items dirty",
        "number": 670,
        "id": 10375856,
        "events_url": "https://api.github.com/repos/emberjs/data/issues/670/events",
        "html_url": "https://github.com/emberjs/data/issues/670"
      },
      {
        "updated_at": "2013-01-28T02:20:33Z",
        "assignee": null,
        "url": "https://api.github.com/repos/emberjs/data/issues/668",
        "comments": 1,
        "comments_url": "https://api.github.com/repos/emberjs/data/issues/668/comments",
        "user": {
          "type": "User",
          "received_events_url": "https://api.github.com/users/mehulkar/received_events",
          "url": "https://api.github.com/users/mehulkar",
          "organizations_url": "https://api.github.com/users/mehulkar/orgs",
          "gists_url": "https://api.github.com/users/mehulkar/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/mehulkar/starred{/owner}{/repo}",
          "gravatar_id": "57c2dff3cf681f22f9519a18bafc7bce",
          "repos_url": "https://api.github.com/users/mehulkar/repos",
          "followers_url": "https://api.github.com/users/mehulkar/followers",
          "subscriptions_url": "https://api.github.com/users/mehulkar/subscriptions",
          "following_url": "https://api.github.com/users/mehulkar/following",
          "events_url": "https://api.github.com/users/mehulkar/events{/privacy}",
          "avatar_url": "https://secure.gravatar.com/avatar/57c2dff3cf681f22f9519a18bafc7bce?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
          "id": 490968,
          "login": "mehulkar"
        },
        "created_at": "2013-01-28T01:51:22Z",
        "labels_url": "https://api.github.com/repos/emberjs/data/issues/668/labels{/name}",
        "body": "I'm not sure what the reasoning is behind the existing setup, but below is a proposal. If I'm missing something entirely, let me know. \r\n\r\n```javascript\r\n/* \r\nAdapter blindly puts the record into error state \r\ninstead of checking status codes.\r\n*/\r\nDS.RESTAdapter = DS.Adapter.extend({\r\n   didError: function(store, type, record, xhr) {\r\n       var data = JSON.parse(xhr.responseText);\r\n      store.recordWasError(record, data['errors'], xhr.status );\r\n\r\n/*\r\nstore doesn't change except adding another param.\r\nwe could optionally do things conditionally for the status code\r\n*/\r\nrecordWasError: function(record, errors, statusCode) {\r\n  record.adapterDidError(errors);\r\n},\r\n\r\n// record sends into error state\r\nadapterDidError: function(errors) {\r\n    this.send('becameError', errors);\r\n}\r\n\r\n/* \r\nadd errors to the record.errors.\r\nThis is the same thing becameInvalid is doing under `inFlight` right now.\r\n*/\r\n\r\nbecameError: function(manager, errors) {\r\n  var record = get(manager, 'record');\r\n  set(record, 'errors', errors);      \r\n  manager.transitionTo('error');\r\n  manager.send('invokeLifecycleCallbacks');\r\n}\r\n```\r\n\r\nI'm not sure what's special about the 422 status code, but this makes error state handling much more flexible on the client side. We can observe the `errors` array as well as `isError` this way. ",
        "pull_request": {
          "diff_url": null,
          "patch_url": null,
          "html_url": null
        },
        "milestone": null,
        "closed_at": null,
        "state": "open",
        "labels": [

        ],
        "title": "RESTAdapter sends record into invalid state instead of error state",
        "number": 668,
        "id": 10362477,
        "events_url": "https://api.github.com/repos/emberjs/data/issues/668/events",
        "html_url": "https://github.com/emberjs/data/issues/668"
      },
      {
        "updated_at": "2013-01-28T03:54:22Z",
        "assignee": null,
        "url": "https://api.github.com/repos/emberjs/data/issues/667",
        "comments": 2,
        "comments_url": "https://api.github.com/repos/emberjs/data/issues/667/comments",
        "user": {
          "type": "User",
          "received_events_url": "https://api.github.com/users/raggi/received_events",
          "url": "https://api.github.com/users/raggi",
          "organizations_url": "https://api.github.com/users/raggi/orgs",
          "gists_url": "https://api.github.com/users/raggi/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/raggi/starred{/owner}{/repo}",
          "gravatar_id": "b19b02a49b433c9e2e6e6c43785d2bfb",
          "repos_url": "https://api.github.com/users/raggi/repos",
          "followers_url": "https://api.github.com/users/raggi/followers",
          "subscriptions_url": "https://api.github.com/users/raggi/subscriptions",
          "following_url": "https://api.github.com/users/raggi/following",
          "events_url": "https://api.github.com/users/raggi/events{/privacy}",
          "avatar_url": "https://secure.gravatar.com/avatar/b19b02a49b433c9e2e6e6c43785d2bfb?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
          "id": 348,
          "login": "raggi"
        },
        "created_at": "2013-01-27T22:09:36Z",
        "labels_url": "https://api.github.com/repos/emberjs/data/issues/667/labels{/name}",
        "body": "`App.Item.find(1000000000000000000000)`\r\n\r\nGenerates:\r\n\r\n`GET http://localhost:8080/items/1e+21 500 (Internal Server Error)`\r\n\r\nBut should generate:\r\n\r\n`GET http://localhost:8080/items/1000000000000000000000`\r\n\r\nPreviously incorrectly posted at emberjs/ember.js#1894\r\n",
        "pull_request": {
          "diff_url": null,
          "patch_url": null,
          "html_url": null
        },
        "milestone": null,
        "closed_at": null,
        "state": "open",
        "labels": [

        ],
        "title": "Large ID values lead to exponent representation in URLs",
        "number": 667,
        "id": 10359872,
        "events_url": "https://api.github.com/repos/emberjs/data/issues/667/events",
        "html_url": "https://github.com/emberjs/data/issues/667"
      },
      {
        "updated_at": "2013-01-28T18:45:23Z",
        "assignee": null,
        "url": "https://api.github.com/repos/emberjs/data/issues/666",
        "comments": 5,
        "comments_url": "https://api.github.com/repos/emberjs/data/issues/666/comments",
        "user": {
          "type": "User",
          "received_events_url": "https://api.github.com/users/aaronbrethorst/received_events",
          "url": "https://api.github.com/users/aaronbrethorst",
          "organizations_url": "https://api.github.com/users/aaronbrethorst/orgs",
          "gists_url": "https://api.github.com/users/aaronbrethorst/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/aaronbrethorst/starred{/owner}{/repo}",
          "gravatar_id": "1178ce2f664a6cee9a05a3e11af5d8d2",
          "repos_url": "https://api.github.com/users/aaronbrethorst/repos",
          "followers_url": "https://api.github.com/users/aaronbrethorst/followers",
          "subscriptions_url": "https://api.github.com/users/aaronbrethorst/subscriptions",
          "following_url": "https://api.github.com/users/aaronbrethorst/following",
          "events_url": "https://api.github.com/users/aaronbrethorst/events{/privacy}",
          "avatar_url": "https://secure.gravatar.com/avatar/1178ce2f664a6cee9a05a3e11af5d8d2?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
          "id": 2254,
          "login": "aaronbrethorst"
        },
        "created_at": "2013-01-27T03:02:46Z",
        "labels_url": "https://api.github.com/repos/emberjs/data/issues/666/labels{/name}",
        "body": "(feature request)\r\n\r\nExpected behavior: lazily loading paginated data from a server is possible.\r\n\r\nActual: This doesn't appear to be the case without modifying Ember Data.\r\n\r\nI spent some time fumbling around the other day trying to get lazy loading of hasMany relationships to work properly (specifically, I was trying to load paginated data from GitHub's API via JSONP), and it appeared to me to be impossible.\r\n\r\nPer this answer on SO: http://stackoverflow.com/a/14532845/136839 it does not appear that what I'm trying to do is possible today without modifying the library.\r\n\r\nthanks!",
        "pull_request": {
          "diff_url": null,
          "patch_url": null,
          "html_url": null
        },
        "milestone": null,
        "closed_at": null,
        "state": "open",
        "labels": [

        ],
        "title": "Lazy Loading hasMany appears to be impossible",
        "number": 666,
        "id": 10346737,
        "events_url": "https://api.github.com/repos/emberjs/data/issues/666/events",
        "html_url": "https://github.com/emberjs/data/issues/666"
      },
      {
        "updated_at": "2013-01-25T09:11:07Z",
        "assignee": null,
        "url": "https://api.github.com/repos/emberjs/data/issues/664",
        "comments": 0,
        "comments_url": "https://api.github.com/repos/emberjs/data/issues/664/comments",
        "user": {
          "type": "User",
          "received_events_url": "https://api.github.com/users/logical42/received_events",
          "url": "https://api.github.com/users/logical42",
          "organizations_url": "https://api.github.com/users/logical42/orgs",
          "gists_url": "https://api.github.com/users/logical42/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/logical42/starred{/owner}{/repo}",
          "gravatar_id": "c8ffaa1e385df361e2e970d440e4533b",
          "repos_url": "https://api.github.com/users/logical42/repos",
          "followers_url": "https://api.github.com/users/logical42/followers",
          "subscriptions_url": "https://api.github.com/users/logical42/subscriptions",
          "following_url": "https://api.github.com/users/logical42/following",
          "events_url": "https://api.github.com/users/logical42/events{/privacy}",
          "avatar_url": "https://secure.gravatar.com/avatar/c8ffaa1e385df361e2e970d440e4533b?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
          "id": 704877,
          "login": "logical42"
        },
        "created_at": "2013-01-25T09:11:07Z",
        "labels_url": "https://api.github.com/repos/emberjs/data/issues/664/labels{/name}",
        "body": "There is a test which is incorrectly described. This fixes the description so that what is being tested makes sense.",
        "pull_request": {
          "diff_url": "https://github.com/emberjs/data/pull/664.diff",
          "patch_url": "https://github.com/emberjs/data/pull/664.patch",
          "html_url": "https://github.com/emberjs/data/pull/664"
        },
        "milestone": null,
        "closed_at": null,
        "state": "open",
        "labels": [

        ],
        "title": "fix test description to match what is actually being tested",
        "number": 664,
        "id": 10304363,
        "events_url": "https://api.github.com/repos/emberjs/data/issues/664/events",
        "html_url": "https://github.com/emberjs/data/issues/664"
      },
      {
        "updated_at": "2013-01-24T20:32:52Z",
        "assignee": null,
        "url": "https://api.github.com/repos/emberjs/data/issues/663",
        "comments": 0,
        "comments_url": "https://api.github.com/repos/emberjs/data/issues/663/comments",
        "user": {
          "type": "User",
          "received_events_url": "https://api.github.com/users/ppcano/received_events",
          "url": "https://api.github.com/users/ppcano",
          "organizations_url": "https://api.github.com/users/ppcano/orgs",
          "gists_url": "https://api.github.com/users/ppcano/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/ppcano/starred{/owner}{/repo}",
          "gravatar_id": "89e3039f1a0c7d1733b3b6054d042709",
          "repos_url": "https://api.github.com/users/ppcano/repos",
          "followers_url": "https://api.github.com/users/ppcano/followers",
          "subscriptions_url": "https://api.github.com/users/ppcano/subscriptions",
          "following_url": "https://api.github.com/users/ppcano/following",
          "events_url": "https://api.github.com/users/ppcano/events{/privacy}",
          "avatar_url": "https://secure.gravatar.com/avatar/89e3039f1a0c7d1733b3b6054d042709?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
          "id": 825430,
          "login": "ppcano"
        },
        "created_at": "2013-01-24T20:32:21Z",
        "labels_url": "https://api.github.com/repos/emberjs/data/issues/663/labels{/name}",
        "body": "I realized that the `DS.Model` `promise` can be resolved multiple times, however `DS.RecordArray` does not work in the same way.\r\n\r\nI PR a failing test to show the behaviour. \r\n\r\nI don't still know which is the expected behaviour, because i got a little confused with some tests i made with `Em.DeferredMixin`. The following test didn't also work:\r\n\r\n```js\r\nasyncTest(\"Can re-resolve a promise\", function() {\r\n  var value = { value: true };\r\n\r\n  var promise = Ember.Deferred.promise(function(deferred) {\r\n    setTimeout(function() {\r\n      Ember.run(function() { deferred.resolve(value); });\r\n    });\r\n  });\r\n\r\n  promise.then(function(resolveValue) {\r\n    equal(resolveValue, value, \"The resolved value should be correct\");\r\n\r\n    promise.then(function(resolveValue) {\r\n      start();\r\n    });\r\n\r\n});\r\n```\r\n\r\nMaybe, i didn't understand well something obvious.",
        "pull_request": {
          "diff_url": "https://github.com/emberjs/data/pull/663.diff",
          "patch_url": "https://github.com/emberjs/data/pull/663.patch",
          "html_url": "https://github.com/emberjs/data/pull/663"
        },
        "milestone": null,
        "closed_at": null,
        "state": "open",
        "labels": [

        ],
        "title": "Add failing test, can record array promise be resolved multiple times?",
        "number": 663,
        "id": 10287925,
        "events_url": "https://api.github.com/repos/emberjs/data/issues/663/events",
        "html_url": "https://github.com/emberjs/data/issues/663"
      },
      {
        "updated_at": "2013-01-24T20:31:27Z",
        "assignee": null,
        "url": "https://api.github.com/repos/emberjs/data/issues/662",
        "comments": 0,
        "comments_url": "https://api.github.com/repos/emberjs/data/issues/662/comments",
        "user": {
          "type": "User",
          "received_events_url": "https://api.github.com/users/mspisars/received_events",
          "url": "https://api.github.com/users/mspisars",
          "organizations_url": "https://api.github.com/users/mspisars/orgs",
          "gists_url": "https://api.github.com/users/mspisars/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/mspisars/starred{/owner}{/repo}",
          "gravatar_id": "953fa7c5f86b0e34cb0dfdbde2d8d79a",
          "repos_url": "https://api.github.com/users/mspisars/repos",
          "followers_url": "https://api.github.com/users/mspisars/followers",
          "subscriptions_url": "https://api.github.com/users/mspisars/subscriptions",
          "following_url": "https://api.github.com/users/mspisars/following",
          "events_url": "https://api.github.com/users/mspisars/events{/privacy}",
          "avatar_url": "https://secure.gravatar.com/avatar/953fa7c5f86b0e34cb0dfdbde2d8d79a?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
          "id": 1454221,
          "login": "mspisars"
        },
        "created_at": "2013-01-24T20:31:27Z",
        "labels_url": "https://api.github.com/repos/emberjs/data/issues/662/labels{/name}",
        "body": "Make DS.Adapter@load method be consistent with the rest of the adapter methods in calling DS.loaderFor instead of loaderFor, this way you can overwrite loaderFor in a custom adapter.",
        "pull_request": {
          "diff_url": "https://github.com/emberjs/data/pull/662.diff",
          "patch_url": "https://github.com/emberjs/data/pull/662.patch",
          "html_url": "https://github.com/emberjs/data/pull/662"
        },
        "milestone": null,
        "closed_at": null,
        "state": "open",
        "labels": [

        ],
        "title": "Make DS.Adapter@load method be consistent with the rest of the adapter methods",
        "number": 662,
        "id": 10287886,
        "events_url": "https://api.github.com/repos/emberjs/data/issues/662/events",
        "html_url": "https://github.com/emberjs/data/issues/662"
      },
      {
        "updated_at": "2013-01-24T00:17:08Z",
        "assignee": null,
        "url": "https://api.github.com/repos/emberjs/data/issues/658",
        "comments": 0,
        "comments_url": "https://api.github.com/repos/emberjs/data/issues/658/comments",
        "user": {
          "type": "User",
          "received_events_url": "https://api.github.com/users/joliss/received_events",
          "url": "https://api.github.com/users/joliss",
          "organizations_url": "https://api.github.com/users/joliss/orgs",
          "gists_url": "https://api.github.com/users/joliss/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/joliss/starred{/owner}{/repo}",
          "gravatar_id": "4d6f74711436cfe252bf4fc8f3cf4971",
          "repos_url": "https://api.github.com/users/joliss/repos",
          "followers_url": "https://api.github.com/users/joliss/followers",
          "subscriptions_url": "https://api.github.com/users/joliss/subscriptions",
          "following_url": "https://api.github.com/users/joliss/following",
          "events_url": "https://api.github.com/users/joliss/events{/privacy}",
          "avatar_url": "https://secure.gravatar.com/avatar/4d6f74711436cfe252bf4fc8f3cf4971?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
          "id": 524783,
          "login": "joliss"
        },
        "created_at": "2013-01-24T00:17:08Z",
        "labels_url": "https://api.github.com/repos/emberjs/data/issues/658/labels{/name}",
        "body": "Purely cosmetic, for readability.",
        "pull_request": {
          "diff_url": "https://github.com/emberjs/data/pull/658.diff",
          "patch_url": "https://github.com/emberjs/data/pull/658.patch",
          "html_url": "https://github.com/emberjs/data/pull/658"
        },
        "milestone": null,
        "closed_at": null,
        "state": "open",
        "labels": [

        ],
        "title": "Call the stateManager a router, like in Ember core",
        "number": 658,
        "id": 10256785,
        "events_url": "https://api.github.com/repos/emberjs/data/issues/658/events",
        "html_url": "https://github.com/emberjs/data/issues/658"
      },
      {
        "updated_at": "2013-01-23T23:12:37Z",
        "assignee": null,
        "url": "https://api.github.com/repos/emberjs/data/issues/657",
        "comments": 0,
        "comments_url": "https://api.github.com/repos/emberjs/data/issues/657/comments",
        "user": {
          "type": "User",
          "received_events_url": "https://api.github.com/users/joliss/received_events",
          "url": "https://api.github.com/users/joliss",
          "organizations_url": "https://api.github.com/users/joliss/orgs",
          "gists_url": "https://api.github.com/users/joliss/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/joliss/starred{/owner}{/repo}",
          "gravatar_id": "4d6f74711436cfe252bf4fc8f3cf4971",
          "repos_url": "https://api.github.com/users/joliss/repos",
          "followers_url": "https://api.github.com/users/joliss/followers",
          "subscriptions_url": "https://api.github.com/users/joliss/subscriptions",
          "following_url": "https://api.github.com/users/joliss/following",
          "events_url": "https://api.github.com/users/joliss/events{/privacy}",
          "avatar_url": "https://secure.gravatar.com/avatar/4d6f74711436cfe252bf4fc8f3cf4971?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
          "id": 524783,
          "login": "joliss"
        },
        "created_at": "2013-01-23T23:12:37Z",
        "labels_url": "https://api.github.com/repos/emberjs/data/issues/657/labels{/name}",
        "body": "I haven't been able to test either of these assertions, but we\r\nencountered both of these issues, and I believe they'd have helped us\r\ntrack them down much faster.",
        "pull_request": {
          "diff_url": "https://github.com/emberjs/data/pull/657.diff",
          "patch_url": "https://github.com/emberjs/data/pull/657.patch",
          "html_url": "https://github.com/emberjs/data/pull/657"
        },
        "milestone": null,
        "closed_at": null,
        "state": "open",
        "labels": [

        ],
        "title": "Add assertions",
        "number": 657,
        "id": 10254910,
        "events_url": "https://api.github.com/repos/emberjs/data/issues/657/events",
        "html_url": "https://github.com/emberjs/data/issues/657"
      },
      {
        "updated_at": "2013-01-23T16:01:34Z",
        "assignee": null,
        "url": "https://api.github.com/repos/emberjs/data/issues/656",
        "comments": 1,
        "comments_url": "https://api.github.com/repos/emberjs/data/issues/656/comments",
        "user": {
          "type": "User",
          "received_events_url": "https://api.github.com/users/teddyzeenny/received_events",
          "url": "https://api.github.com/users/teddyzeenny",
          "organizations_url": "https://api.github.com/users/teddyzeenny/orgs",
          "gists_url": "https://api.github.com/users/teddyzeenny/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/teddyzeenny/starred{/owner}{/repo}",
          "gravatar_id": "fcff4ff31a2f4380c73b257492c8b796",
          "repos_url": "https://api.github.com/users/teddyzeenny/repos",
          "followers_url": "https://api.github.com/users/teddyzeenny/followers",
          "subscriptions_url": "https://api.github.com/users/teddyzeenny/subscriptions",
          "following_url": "https://api.github.com/users/teddyzeenny/following",
          "events_url": "https://api.github.com/users/teddyzeenny/events{/privacy}",
          "avatar_url": "https://secure.gravatar.com/avatar/fcff4ff31a2f4380c73b257492c8b796?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
          "id": 1061742,
          "login": "teddyzeenny"
        },
        "created_at": "2013-01-23T13:34:39Z",
        "labels_url": "https://api.github.com/repos/emberjs/data/issues/656/labels{/name}",
        "body": "I am working on a complex ember application, and I keep having the need to access the model's clean values (the last committed values of its attributes)\r\n\r\nThis mostly shows when these attributes affect the app's layout, or when a save has a low chance of succeeding (i.e. it requires heavy validation on the server)\r\n\r\nSay you have a button called `Upgrade Plan`, and the server checks if this person's credit card works.  And in the template:\r\n\r\n```\r\n{{#if user.isProPlan}}\r\n  <nav>{{#linkTo prodashboard}}Pro Dashboard{{/linkTo}}</nav>\r\n{{/if}}\r\n```\r\n\r\nI set `isProPlan` to true and commit, but before I have a confirmation from the server, the layout changes.\r\n\r\nThis is just an example that I made up, there are many cases in which I encountered problems, especially when binding text fields to model attributes; while the user is typing, the layout would be dancing.\r\n\r\nI finally wrote this mixin:\r\n\r\n```\r\nvar CleanMixin = Ember.Mixin.create({\r\n    _cleanObject: null,\r\n\r\n    clean: function() {\r\n      var cleanObject = this.get('_cleanObject');\r\n\r\n      // No need to use up memory if model isn't dirty\r\n      // so just return model as long as it's clean\r\n      if (!this.get('isDirty')) {\r\n        return this;\r\n      }\r\n\r\n      // Create clean object if it hasn't been created\r\n      // or else just update it's attributes\r\n      if (!cleanObject) {\r\n        cleanObject = Ember.Object.create(this._data.attributes);\r\n        this.set('_cleanObject', cleanObject);\r\n      } else {\r\n        cleanObject.setProperties(this._data.attributes);\r\n      }\r\n      return cleanObject;\r\n\r\n    }.property('data', 'isDirty')\r\n  });\r\n```\r\n\r\n\r\nAnd now I can do `App.User = DS.Model.extend(CleanMixin, ...)`\r\n```\r\n{{#if user.clean.isProPlan}}\r\n  <nav>{{#linkTo prodashboard}}Pro Dashboard{{/linkTo}}</nav>\r\n{{/if}}\r\n```\r\n\r\nThis mixin sort of mimics Backbone's `Model.save({ wait: true })`, but implemented with ember concepts in mind.\r\n\r\nI'm wondering if that use case is common enough to be added to the EmberData core.  If this API is fine, I can work on the implementation myself.\r\n\r\n",
        "pull_request": {
          "diff_url": null,
          "patch_url": null,
          "html_url": null
        },
        "milestone": null,
        "closed_at": null,
        "state": "open",
        "labels": [

        ],
        "title": "Proposal: Expose access to the model's clean attribute values",
        "number": 656,
        "id": 10232177,
        "events_url": "https://api.github.com/repos/emberjs/data/issues/656/events",
        "html_url": "https://github.com/emberjs/data/issues/656"
      },
      {
        "updated_at": "2013-01-25T20:01:36Z",
        "assignee": null,
        "url": "https://api.github.com/repos/emberjs/data/issues/655",
        "comments": 3,
        "comments_url": "https://api.github.com/repos/emberjs/data/issues/655/comments",
        "user": {
          "type": "User",
          "received_events_url": "https://api.github.com/users/whather/received_events",
          "url": "https://api.github.com/users/whather",
          "organizations_url": "https://api.github.com/users/whather/orgs",
          "gists_url": "https://api.github.com/users/whather/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/whather/starred{/owner}{/repo}",
          "gravatar_id": "abd4fa28791874b2c95655864436ebee",
          "repos_url": "https://api.github.com/users/whather/repos",
          "followers_url": "https://api.github.com/users/whather/followers",
          "subscriptions_url": "https://api.github.com/users/whather/subscriptions",
          "following_url": "https://api.github.com/users/whather/following",
          "events_url": "https://api.github.com/users/whather/events{/privacy}",
          "avatar_url": "https://secure.gravatar.com/avatar/abd4fa28791874b2c95655864436ebee?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
          "id": 148534,
          "login": "whather"
        },
        "created_at": "2013-01-22T20:38:27Z",
        "labels_url": "https://api.github.com/repos/emberjs/data/issues/655/labels{/name}",
        "body": "I have a model Match which stores a ref to a proposal and has a list of proposals:\r\n\r\n```javascript\r\nGT.Models.Match.reopen  \r\n  proposal: DS.belongsTo(GT.Models.Proposal)\r\n  proposals: DS.hasMany(GT.Models.Proposal) \r\n```\r\n\r\nAnd I have a proposal model which stores a ref to a match:\r\n\r\n```javascript\r\nGT.Models.Proposal.reopen  \r\n  match: DS.belongsTo(GT.Models.Match)\r\n```\r\n\r\nWhen doing:\r\n\r\n```javascript\r\n@get('match.proposals').createRecord()\r\n```\r\n\r\nI get an error thrown because DS._inverseRelationshipFor() returns null if possibleRelationships.length > 1. Is there a workaround for this? What I have above should be perfectly normal.",
        "pull_request": {
          "diff_url": null,
          "patch_url": null,
          "html_url": null
        },
        "milestone": null,
        "closed_at": null,
        "state": "open",
        "labels": [

        ],
        "title": "DS._inverseRelationshipFor() failing for models with multiple possibleRelationships",
        "number": 655,
        "id": 10208339,
        "events_url": "https://api.github.com/repos/emberjs/data/issues/655/events",
        "html_url": "https://github.com/emberjs/data/issues/655"
      },
      {
        "updated_at": "2013-01-22T18:07:18Z",
        "assignee": null,
        "url": "https://api.github.com/repos/emberjs/data/issues/654",
        "comments": 0,
        "comments_url": "https://api.github.com/repos/emberjs/data/issues/654/comments",
        "user": {
          "type": "User",
          "received_events_url": "https://api.github.com/users/sandstrom/received_events",
          "url": "https://api.github.com/users/sandstrom",
          "organizations_url": "https://api.github.com/users/sandstrom/orgs",
          "gists_url": "https://api.github.com/users/sandstrom/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sandstrom/starred{/owner}{/repo}",
          "gravatar_id": "ff912e33733a3afa86851ade03568794",
          "repos_url": "https://api.github.com/users/sandstrom/repos",
          "followers_url": "https://api.github.com/users/sandstrom/followers",
          "subscriptions_url": "https://api.github.com/users/sandstrom/subscriptions",
          "following_url": "https://api.github.com/users/sandstrom/following",
          "events_url": "https://api.github.com/users/sandstrom/events{/privacy}",
          "avatar_url": "https://secure.gravatar.com/avatar/ff912e33733a3afa86851ade03568794?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
          "id": 122287,
          "login": "sandstrom"
        },
        "created_at": "2013-01-22T18:06:10Z",
        "labels_url": "https://api.github.com/repos/emberjs/data/issues/654/labels{/name}",
        "body": "The method `createManyArray` used by `findMany` returns an instance of `DS.ManyArray`.\r\n\r\nManyArray is primarily used to represent relations, and as such expect an `owner`. However, there is no owner when the ManyArray is created by findMany. The relevant line which fails due to owner being `undefined` is this:\r\n\r\n    if (!owner._suspendedRelationships) {\r\n\r\nThe exception is thrown in these two methods: `arrayContentWillChange` and `arrayContentDidChange`.\r\n\r\n**Possible solutions**\r\n\r\n1. Ensure that owner is present (may be more of a workaround then a solution), e.g. `if (owner && !owner._suspendedRelationships) {`\r\n\r\n2. Return `DS.RecordArray` from `findMany`, similar to what `all` returns (this requires more work and may or may not be a good idea).\r\n\r\n*Let me know which of these two solutions would you prefer (or perhaps you'd suggest something else).*",
        "pull_request": {
          "diff_url": null,
          "patch_url": null,
          "html_url": null
        },
        "milestone": null,
        "closed_at": null,
        "state": "open",
        "labels": [

        ],
        "title": "Changes to DS.ManyArray returned by findMany throws exception [solution included]",
        "number": 654,
        "id": 10202604,
        "events_url": "https://api.github.com/repos/emberjs/data/issues/654/events",
        "html_url": "https://github.com/emberjs/data/issues/654"
      },
      {
        "updated_at": "2013-01-22T12:54:18Z",
        "assignee": null,
        "url": "https://api.github.com/repos/emberjs/data/issues/653",
        "comments": 0,
        "comments_url": "https://api.github.com/repos/emberjs/data/issues/653/comments",
        "user": {
          "type": "User",
          "received_events_url": "https://api.github.com/users/drogus/received_events",
          "url": "https://api.github.com/users/drogus",
          "organizations_url": "https://api.github.com/users/drogus/orgs",
          "gists_url": "https://api.github.com/users/drogus/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/drogus/starred{/owner}{/repo}",
          "gravatar_id": "582034b63279abeaa8e76acf12f5ee30",
          "repos_url": "https://api.github.com/users/drogus/repos",
          "followers_url": "https://api.github.com/users/drogus/followers",
          "subscriptions_url": "https://api.github.com/users/drogus/subscriptions",
          "following_url": "https://api.github.com/users/drogus/following",
          "events_url": "https://api.github.com/users/drogus/events{/privacy}",
          "avatar_url": "https://secure.gravatar.com/avatar/582034b63279abeaa8e76acf12f5ee30?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
          "id": 5004,
          "login": "drogus"
        },
        "created_at": "2013-01-22T12:09:47Z",
        "labels_url": "https://api.github.com/repos/emberjs/data/issues/653/labels{/name}",
        "body": "Currently there is no easy way to hook into the place where `get('attribute')` is called (where attribute can be also relationship). This is needed in order to extend ember-data with custom behavior in those points.\r\n\r\nMy use case is \"incomplete\" record. On https://travis-ci.org we use a notion on \"incomplete\" records - record that has an id and a data populated in some way (in our case it's pusher), but this data may not contain all of the attributes. When attribute that can be missing is fetched, full record is fetched through the API. That way even if we use attributes or relationships that are not set by pusher, we don't risk that data is outdated.\r\n\r\nI would like to send a pull request for incomplete functionality as well, but figuring out how should it work to be useful also for others and pushing it into the framework will probably take some time. The changes in this pull request are pretty straightforward and will enable me to implement incomplete records much easier (ie. no monkey patching).",
        "pull_request": {
          "diff_url": "https://github.com/emberjs/data/pull/653.diff",
          "patch_url": "https://github.com/emberjs/data/pull/653.patch",
          "html_url": "https://github.com/emberjs/data/pull/653"
        },
        "milestone": null,
        "closed_at": null,
        "state": "open",
        "labels": [

        ],
        "title": "Make overriding fetching attributes and relationships easier",
        "number": 653,
        "id": 10189740,
        "events_url": "https://api.github.com/repos/emberjs/data/issues/653/events",
        "html_url": "https://github.com/emberjs/data/issues/653"
      },
      {
        "updated_at": "2013-01-20T12:22:07Z",
        "assignee": null,
        "url": "https://api.github.com/repos/emberjs/data/issues/651",
        "comments": 1,
        "comments_url": "https://api.github.com/repos/emberjs/data/issues/651/comments",
        "user": {
          "type": "User",
          "received_events_url": "https://api.github.com/users/ivanvanderbyl/received_events",
          "url": "https://api.github.com/users/ivanvanderbyl",
          "organizations_url": "https://api.github.com/users/ivanvanderbyl/orgs",
          "gists_url": "https://api.github.com/users/ivanvanderbyl/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/ivanvanderbyl/starred{/owner}{/repo}",
          "gravatar_id": "9db8544717ba3d5a90afb1b5b9bd50bf",
          "repos_url": "https://api.github.com/users/ivanvanderbyl/repos",
          "followers_url": "https://api.github.com/users/ivanvanderbyl/followers",
          "subscriptions_url": "https://api.github.com/users/ivanvanderbyl/subscriptions",
          "following_url": "https://api.github.com/users/ivanvanderbyl/following",
          "events_url": "https://api.github.com/users/ivanvanderbyl/events{/privacy}",
          "avatar_url": "https://secure.gravatar.com/avatar/9db8544717ba3d5a90afb1b5b9bd50bf?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
          "id": 24278,
          "login": "ivanvanderbyl"
        },
        "created_at": "2013-01-20T12:17:26Z",
        "labels_url": "https://api.github.com/repos/emberjs/data/issues/651/labels{/name}",
        "body": "The API my app talks to uses 128bit UUIDs for IDs, and we get a lot of them. This causes the server to reject the request to side-load even a relatively small quantity of records (~100) because the request URI is so large it seems to exceed a server-side limit.\r\n\r\nNow I'm not sure precisely what the limit is, although I've heard it's around 4096 chars.\r\n\r\nIs there a way to only side-load small batches, say 10 at a time, or as needed?",
        "pull_request": {
          "diff_url": null,
          "patch_url": null,
          "html_url": null
        },
        "milestone": null,
        "closed_at": null,
        "state": "open",
        "labels": [

        ],
        "title": "Side-loading large quantities of associated records raises 414 (Request-URI Too Large) ",
        "number": 651,
        "id": 10135574,
        "events_url": "https://api.github.com/repos/emberjs/data/issues/651/events",
        "html_url": "https://github.com/emberjs/data/issues/651"
      },
      {
        "updated_at": "2013-01-20T12:33:39Z",
        "assignee": null,
        "url": "https://api.github.com/repos/emberjs/data/issues/649",
        "comments": 5,
        "comments_url": "https://api.github.com/repos/emberjs/data/issues/649/comments",
        "user": {
          "type": "User",
          "received_events_url": "https://api.github.com/users/darthdeus/received_events",
          "url": "https://api.github.com/users/darthdeus",
          "organizations_url": "https://api.github.com/users/darthdeus/orgs",
          "gists_url": "https://api.github.com/users/darthdeus/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/darthdeus/starred{/owner}{/repo}",
          "gravatar_id": "16a5eec5eca4550033c0e19dba3b32b8",
          "repos_url": "https://api.github.com/users/darthdeus/repos",
          "followers_url": "https://api.github.com/users/darthdeus/followers",
          "subscriptions_url": "https://api.github.com/users/darthdeus/subscriptions",
          "following_url": "https://api.github.com/users/darthdeus/following",
          "events_url": "https://api.github.com/users/darthdeus/events{/privacy}",
          "avatar_url": "https://secure.gravatar.com/avatar/16a5eec5eca4550033c0e19dba3b32b8?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
          "id": 123374,
          "login": "darthdeus"
        },
        "created_at": "2013-01-20T02:31:02Z",
        "labels_url": "https://api.github.com/repos/emberjs/data/issues/649/labels{/name}",
        "body": "Let's say I need to do a custom AJAX request and afterwards sideload the data I get back from the server into the identity map. It might look something like this\r\n\r\n```javascript\r\nApp.SomeRoute = Ember.Route.extend({\r\n  events: {\r\n    foo: function() {\r\n      var route = this;\r\n\r\n      $.post(\"/thingy\", function(data) {\r\n        // here the magic happens, something like\r\n        route.get(\"store\").loadMany(App.User, data.users);\r\n      });\r\n    }\r\n  }\r\n});\r\n```\r\n\r\nI've been using something like this a while ago, but it seems to have stopped working now, and I'm not really sure why, since this functionality is undocumented.\r\n\r\nI found some docs for `DS.Store.load` in the code, [but they seem to be outdated](https://github.com/emberjs/data/blob/master/packages/ember-data/lib/system/store.js#L1535-L1538).\r\n\r\nHow sohuld I be doing this?",
        "pull_request": {
          "diff_url": null,
          "patch_url": null,
          "html_url": null
        },
        "milestone": null,
        "closed_at": null,
        "state": "open",
        "labels": [

        ],
        "title": "Loading data into the store form an AJAX request",
        "number": 649,
        "id": 10132218,
        "events_url": "https://api.github.com/repos/emberjs/data/issues/649/events",
        "html_url": "https://github.com/emberjs/data/issues/649"
      },
      {
        "updated_at": "2013-01-24T16:45:20Z",
        "assignee": null,
        "url": "https://api.github.com/repos/emberjs/data/issues/646",
        "comments": 5,
        "comments_url": "https://api.github.com/repos/emberjs/data/issues/646/comments",
        "user": {
          "type": "User",
          "received_events_url": "https://api.github.com/users/workmanw/received_events",
          "url": "https://api.github.com/users/workmanw",
          "organizations_url": "https://api.github.com/users/workmanw/orgs",
          "gists_url": "https://api.github.com/users/workmanw/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/workmanw/starred{/owner}{/repo}",
          "gravatar_id": "45c0f32569aa852b6b81e91bd9499de8",
          "repos_url": "https://api.github.com/users/workmanw/repos",
          "followers_url": "https://api.github.com/users/workmanw/followers",
          "subscriptions_url": "https://api.github.com/users/workmanw/subscriptions",
          "following_url": "https://api.github.com/users/workmanw/following",
          "events_url": "https://api.github.com/users/workmanw/events{/privacy}",
          "avatar_url": "https://secure.gravatar.com/avatar/45c0f32569aa852b6b81e91bd9499de8?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
          "id": 825487,
          "login": "workmanw"
        },
        "created_at": "2013-01-19T04:11:09Z",
        "labels_url": "https://api.github.com/repos/emberjs/data/issues/646/labels{/name}",
        "body": "This was marked as fixed in #221. In fact, I confirmed this to be fixed for @NickFranceschina, but it appears to have since regressed back to broken. Here is a pull request with a test against this issue. \r\n\r\nMy initial thought was to check in `dirtyRecordsForAttributeChange` against the `data.attribute[attributeName]` value, though I'm not confident about this. If someone can suggest a proper fix, I'd be happy to pursue it.",
        "pull_request": {
          "diff_url": "https://github.com/emberjs/data/pull/646.diff",
          "patch_url": "https://github.com/emberjs/data/pull/646.patch",
          "html_url": "https://github.com/emberjs/data/pull/646"
        },
        "milestone": null,
        "closed_at": null,
        "state": "open",
        "labels": [

        ],
        "title": "Setting same property value still sets isDirty (Regression)",
        "number": 646,
        "id": 10121214,
        "events_url": "https://api.github.com/repos/emberjs/data/issues/646/events",
        "html_url": "https://github.com/emberjs/data/issues/646"
      }
    ];
  }
);
